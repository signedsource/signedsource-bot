"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const Config_1 = __importDefault(require("../utils/Config"));
class Ticket {
    interaction;
    constructor(interaction) {
        this.interaction = interaction;
    }
    create(ticket) {
        var desc, embeds;
        if (ticket == "apply")
            desc = Config_1.default.messages.applyTicketMessage;
        if (ticket == "support")
            desc = Config_1.default.messages.supportTicketMessage;
        this.interaction.guild.channels.create(`${ticket}-ticket-${this.interaction.member.user.username}`, {
            //@ts-ignore
            parent: this.interaction.client.channels.cache.find(c => c.id === Config_1.default.channels.ticketsCategory && c.type === "GUILD_CATEGORY"),
            permissionOverwrites: [
                {
                    id: this.interaction.member.user.id,
                    allow: [
                        discord_js_1.Permissions.FLAGS.VIEW_CHANNEL,
                        discord_js_1.Permissions.FLAGS.SEND_MESSAGES,
                        discord_js_1.Permissions.FLAGS.READ_MESSAGE_HISTORY
                    ],
                },
                {
                    id: this.interaction.guild.roles.everyone,
                    deny: [
                        discord_js_1.Permissions.FLAGS.VIEW_CHANNEL,
                        discord_js_1.Permissions.FLAGS.SEND_MESSAGES,
                        discord_js_1.Permissions.FLAGS.READ_MESSAGE_HISTORY
                    ]
                },
                {
                    id: Config_1.default.roles.member,
                    deny: [
                        discord_js_1.Permissions.FLAGS.VIEW_CHANNEL,
                        discord_js_1.Permissions.FLAGS.SEND_MESSAGES,
                        discord_js_1.Permissions.FLAGS.READ_MESSAGE_HISTORY
                    ]
                },
                {
                    id: Config_1.default.roles.staff,
                    allow: [
                        discord_js_1.Permissions.FLAGS.VIEW_CHANNEL,
                        discord_js_1.Permissions.FLAGS.SEND_MESSAGES,
                        discord_js_1.Permissions.FLAGS.READ_MESSAGE_HISTORY
                    ]
                },
                {
                    id: Config_1.default.roles.signedteam,
                    allow: [
                        discord_js_1.Permissions.FLAGS.VIEW_CHANNEL,
                        discord_js_1.Permissions.FLAGS.SEND_MESSAGES,
                        discord_js_1.Permissions.FLAGS.READ_MESSAGE_HISTORY
                    ]
                }
            ]
        }).then(async (c) => {
            const closeTicketRow = new discord_js_1.MessageActionRow()
                .addComponents(new discord_js_1.MessageButton()
                .setCustomId('closeTicketBtn')
                .setLabel('Close Ticket')
                .setEmoji('‚ùå')
                .setStyle('DANGER'));
            const ticketsEmbed = new discord_js_1.MessageEmbed()
                .setColor('#EE0000')
                .setTitle(`Ticket of ${this.interaction.member.user.username}`)
                .setDescription(desc);
            const qasEmbed = new discord_js_1.MessageEmbed()
                .setColor('#EE0000')
                .setDescription(Config_1.default.messages.questionsApply.join("\n"))
                .setTimestamp();
            if (ticket == "apply") {
                embeds = [ticketsEmbed, qasEmbed];
            }
            else {
                embeds = [ticketsEmbed];
            }
            await c.send({
                content: `<@${this.interaction.member.user.id}> | <@&${Config_1.default.roles.signedteam}> | <@&${Config_1.default.roles.staff}>`,
                embeds,
                components: [closeTicketRow]
            }).then(m => m.pin());
        }).catch(e => console.log(e));
    }
    delete(channel) {
        channel.delete();
    }
}
exports.default = Ticket;
//# sourceMappingURL=data:application/json;base64,