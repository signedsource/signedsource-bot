"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorEmbed = exports.suggestionSentEmbed = exports.applyTicketButton = exports.normalTicketButton = exports.noPermsEmbed = exports.options = exports.token = void 0;
const discord_js_1 = require("discord.js");
const Config_1 = __importDefault(require("./Config"));
require('dotenv').config({ path: `${__dirname}/../../.env` });
exports.token = "ODg4NDgzNDc5NDQ3MjczNDgy.YUTWuA.yZXpvYXE3DtHlrPN7nSdpa-oAkg";
exports.options = {
    intents: [discord_js_1.Intents.FLAGS.GUILDS, discord_js_1.Intents.FLAGS.GUILD_PRESENCES, discord_js_1.Intents.FLAGS.GUILD_MEMBERS, discord_js_1.Intents.FLAGS.GUILD_MESSAGES, discord_js_1.Intents.FLAGS.GUILD_INTEGRATIONS],
    partials: ["MESSAGE", "CHANNEL", "USER", "GUILD_MEMBER"]
};
exports.noPermsEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":x: | An error ocurred")
    .setDescription(Config_1.default.messages.notEnoughPermissions)
    .setColor("RED")
    .setTimestamp();
exports.normalTicketButton = new discord_js_1.MessageActionRow()
    .addComponents(new discord_js_1.MessageButton()
    .setCustomId('normalTicketBtn')
    .setLabel('Open Support Ticket')
    .setEmoji('üì©')
    .setStyle('PRIMARY'));
exports.applyTicketButton = new discord_js_1.MessageActionRow()
    .addComponents(new discord_js_1.MessageButton()
    .setCustomId('applyTicketBtn')
    .setLabel('Open Apply Ticket')
    .setEmoji("‚ÑπÔ∏è")
    .setStyle("SUCCESS"));
exports.suggestionSentEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":white_check_mark: | Suggestion sent!")
    .setDescription(Config_1.default.messages.suggestionSent)
    .setColor("GREEN")
    .setTimestamp();
exports.errorEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":x: | An error ocurred")
    .setDescription("An error ocurred while executing this command, the error has been informed")
    .setColor("RED")
    .setTimestamp();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL0NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBbUc7QUFDbkcsc0RBQThCO0FBQzlCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxTQUFTLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFFakQsUUFBQSxLQUFLLEdBQVcsNkRBQTZELENBQUM7QUFDOUUsUUFBQSxPQUFPLEdBQWtCO0lBQ2xDLE9BQU8sRUFBRSxDQUFFLG9CQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxvQkFBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsb0JBQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLG9CQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxvQkFBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBRTtJQUM3SixRQUFRLEVBQUUsQ0FBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUU7Q0FDN0QsQ0FBQTtBQUVZLFFBQUEsWUFBWSxHQUFpQixJQUFJLHlCQUFZLEVBQUU7S0FDdkQsUUFBUSxDQUFDLHdCQUF3QixDQUFDO0tBQ2xDLGNBQWMsQ0FBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztLQUNwRCxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ2YsWUFBWSxFQUFFLENBQUM7QUFFUCxRQUFBLGtCQUFrQixHQUFxQixJQUFJLDZCQUFnQixFQUFFO0tBQ3JFLGFBQWEsQ0FDVixJQUFJLDBCQUFhLEVBQUU7S0FDZCxXQUFXLENBQUMsaUJBQWlCLENBQUM7S0FDOUIsUUFBUSxDQUFDLHFCQUFxQixDQUFDO0tBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUM7S0FDZCxRQUFRLENBQUMsU0FBUyxDQUFDLENBQzNCLENBQUM7QUFFTyxRQUFBLGlCQUFpQixHQUFxQixJQUFJLDZCQUFnQixFQUFFO0tBQ3BFLGFBQWEsQ0FDVixJQUFJLDBCQUFhLEVBQUU7S0FDZCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7S0FDN0IsUUFBUSxDQUFDLG1CQUFtQixDQUFDO0tBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUM7S0FDZCxRQUFRLENBQUMsU0FBUyxDQUFDLENBQzNCLENBQUM7QUFFTyxRQUFBLG1CQUFtQixHQUFpQixJQUFJLHlCQUFZLEVBQUU7S0FDOUQsUUFBUSxDQUFDLHVDQUF1QyxDQUFDO0tBQ2pELGNBQWMsQ0FBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7S0FDOUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztLQUNqQixZQUFZLEVBQUUsQ0FBQztBQUVQLFFBQUEsVUFBVSxHQUFpQixJQUFJLHlCQUFZLEVBQUU7S0FDckQsUUFBUSxDQUFDLHdCQUF3QixDQUFDO0tBQ2xDLGNBQWMsQ0FBQyw0RUFBNEUsQ0FBQztLQUM1RixRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ2YsWUFBWSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRPcHRpb25zLCBJbnRlbnRzLCBNZXNzYWdlQWN0aW9uUm93LCBNZXNzYWdlQnV0dG9uLCBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuL0NvbmZpZ1wiO1xyXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoeyBwYXRoOiBgJHtfX2Rpcm5hbWV9Ly4uLy4uLy5lbnZgIH0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRva2VuOiBzdHJpbmcgPSBcIk9EZzRORGd6TkRjNU5EUTNNamN6TkRneS5ZVVRXdUEueVpYcHZZWEUzRHRIbHJQTjduU2RwYS1vQWtnXCI7XHJcbmV4cG9ydCBjb25zdCBvcHRpb25zOiBDbGllbnRPcHRpb25zID0ge1xyXG4gICAgaW50ZW50czogWyBJbnRlbnRzLkZMQUdTLkdVSUxEUywgSW50ZW50cy5GTEFHUy5HVUlMRF9QUkVTRU5DRVMsIEludGVudHMuRkxBR1MuR1VJTERfTUVNQkVSUywgSW50ZW50cy5GTEFHUy5HVUlMRF9NRVNTQUdFUywgSW50ZW50cy5GTEFHUy5HVUlMRF9JTlRFR1JBVElPTlMgXSxcclxuICAgIHBhcnRpYWxzOiBbIFwiTUVTU0FHRVwiLCBcIkNIQU5ORUxcIiwgXCJVU0VSXCIsIFwiR1VJTERfTUVNQkVSXCIgXVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgbm9QZXJtc0VtYmVkOiBNZXNzYWdlRW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgIC5zZXRUaXRsZShcIjp4OiB8IEFuIGVycm9yIG9jdXJyZWRcIilcclxuICAgIC5zZXREZXNjcmlwdGlvbihjb25maWcubWVzc2FnZXMubm90RW5vdWdoUGVybWlzc2lvbnMpXHJcbiAgICAuc2V0Q29sb3IoXCJSRURcIilcclxuICAgIC5zZXRUaW1lc3RhbXAoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBub3JtYWxUaWNrZXRCdXR0b246IE1lc3NhZ2VBY3Rpb25Sb3cgPSBuZXcgTWVzc2FnZUFjdGlvblJvdygpXHJcbiAgICAuYWRkQ29tcG9uZW50cyhcclxuICAgICAgICBuZXcgTWVzc2FnZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIC5zZXRDdXN0b21JZCgnbm9ybWFsVGlja2V0QnRuJylcclxuICAgICAgICAgICAgLnNldExhYmVsKCdPcGVuIFN1cHBvcnQgVGlja2V0JylcclxuICAgICAgICAgICAgLnNldEVtb2ppKCfwn5OpJylcclxuICAgICAgICAgICAgLnNldFN0eWxlKCdQUklNQVJZJylcclxuICAgICk7XHJcblxyXG5leHBvcnQgY29uc3QgYXBwbHlUaWNrZXRCdXR0b246IE1lc3NhZ2VBY3Rpb25Sb3cgPSBuZXcgTWVzc2FnZUFjdGlvblJvdygpXHJcbiAgICAuYWRkQ29tcG9uZW50cyhcclxuICAgICAgICBuZXcgTWVzc2FnZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIC5zZXRDdXN0b21JZCgnYXBwbHlUaWNrZXRCdG4nKVxyXG4gICAgICAgICAgICAuc2V0TGFiZWwoJ09wZW4gQXBwbHkgVGlja2V0JylcclxuICAgICAgICAgICAgLnNldEVtb2ppKFwi4oS577iPXCIpXHJcbiAgICAgICAgICAgIC5zZXRTdHlsZShcIlNVQ0NFU1NcIilcclxuICAgICk7XHJcblxyXG5leHBvcnQgY29uc3Qgc3VnZ2VzdGlvblNlbnRFbWJlZDogTWVzc2FnZUVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAuc2V0VGl0bGUoXCI6d2hpdGVfY2hlY2tfbWFyazogfCBTdWdnZXN0aW9uIHNlbnQhXCIpXHJcbiAgICAuc2V0RGVzY3JpcHRpb24oY29uZmlnLm1lc3NhZ2VzLnN1Z2dlc3Rpb25TZW50KVxyXG4gICAgLnNldENvbG9yKFwiR1JFRU5cIilcclxuICAgIC5zZXRUaW1lc3RhbXAoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBlcnJvckVtYmVkOiBNZXNzYWdlRW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgIC5zZXRUaXRsZShcIjp4OiB8IEFuIGVycm9yIG9jdXJyZWRcIilcclxuICAgIC5zZXREZXNjcmlwdGlvbihcIkFuIGVycm9yIG9jdXJyZWQgd2hpbGUgZXhlY3V0aW5nIHRoaXMgY29tbWFuZCwgdGhlIGVycm9yIGhhcyBiZWVuIGluZm9ybWVkXCIpXHJcbiAgICAuc2V0Q29sb3IoXCJSRURcIilcclxuICAgIC5zZXRUaW1lc3RhbXAoKTsiXX0=