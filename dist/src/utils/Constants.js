"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buttonComponentsArray = exports.errorEmbed = exports.suggestionSentEmbed = exports.applyTicketButton = exports.normalTicketButton = exports.noPermsEmbed = exports.options = exports.token = void 0;
const discord_js_1 = require("discord.js");
const path_1 = __importDefault(require("path"));
const Config_1 = __importDefault(require("./Config"));
require('dotenv').config({ path: path_1.default.join(__dirname, "..", "..", "..", ".env") });
exports.token = process.env.TOKEN;
exports.options = {
    intents: [discord_js_1.Intents.FLAGS.GUILDS, discord_js_1.Intents.FLAGS.GUILD_PRESENCES, discord_js_1.Intents.FLAGS.GUILD_MEMBERS, discord_js_1.Intents.FLAGS.GUILD_MESSAGES, discord_js_1.Intents.FLAGS.GUILD_INTEGRATIONS],
    partials: ["MESSAGE", "CHANNEL", "USER", "GUILD_MEMBER"]
};
exports.noPermsEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":x: | An error ocurred")
    .setDescription(Config_1.default.messages.notEnoughPermissions)
    .setColor("RED")
    .setTimestamp();
exports.normalTicketButton = new discord_js_1.MessageActionRow()
    .addComponents(new discord_js_1.MessageButton()
    .setCustomId('normalTicketBtn')
    .setLabel('Open Support Ticket')
    .setEmoji('üì©')
    .setStyle('PRIMARY'));
exports.applyTicketButton = new discord_js_1.MessageActionRow()
    .addComponents(new discord_js_1.MessageButton()
    .setCustomId('applyTicketBtn')
    .setLabel('Open Apply Ticket')
    .setEmoji("‚ÑπÔ∏è")
    .setStyle("SUCCESS"));
exports.suggestionSentEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":white_check_mark: | Suggestion sent!")
    .setDescription(Config_1.default.messages.suggestionSent)
    .setColor("GREEN")
    .setTimestamp();
exports.errorEmbed = new discord_js_1.MessageEmbed()
    .setTitle(":x: | An error ocurred")
    .setDescription("An error ocurred while executing this command, the error has been informed")
    .setColor("RED")
    .setTimestamp();
exports.buttonComponentsArray = [
    new discord_js_1.MessageActionRow()
        .addComponents(new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-1")
        .setEmoji("1‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-2")
        .setEmoji("2‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-3")
        .setEmoji("3‚É£")
        .setStyle("SECONDARY")),
    new discord_js_1.MessageActionRow()
        .addComponents(new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-4")
        .setEmoji("4‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-5")
        .setEmoji("5‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-6")
        .setEmoji("6‚É£")
        .setStyle("SECONDARY")),
    new discord_js_1.MessageActionRow()
        .addComponents(new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-7")
        .setEmoji("7‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-8")
        .setEmoji("8‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-9")
        .setEmoji("9‚É£")
        .setStyle("SECONDARY")),
    new discord_js_1.MessageActionRow()
        .addComponents(new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-done")
        .setEmoji("‚òëÔ∏è")
        .setStyle("SUCCESS"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-0")
        .setEmoji("0‚É£")
        .setStyle("SECONDARY"), new discord_js_1.MessageButton()
        .setCustomId("verificationCodeBtn-clear")
        .setEmoji("<:cx_saumon:967519902246244353>")
        .setStyle("DANGER"))
];
//# sourceMappingURL=data:application/json;base64,