"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const builders_1 = require("@discordjs/builders");
const discord_js_1 = require("discord.js");
const Config_1 = __importDefault(require("../utils/Config"));
const Constants_1 = require("../utils/Constants");
exports.default = {
    data: new builders_1.SlashCommandBuilder()
        .setName("init")
        .setDescription("Inits a specific bot message.")
        .addStringOption(opt => opt
        .setName("message")
        .setDescription("Select the bot message to init")
        .addChoice("Verification", "verification")
        .addChoice("Tickets", "tickets")
        .addChoice("Private Voices", "privatevoice")
        .addChoice("Roles (Requires CEO)", "roles")
        .setRequired(true)),
    run: async (interaction) => {
        const application = interaction.options.get("message").value;
        const verificationChannel = interaction.guild.channels.cache.find(c => c.id === Config_1.default.channels.verification);
        const ticketsChannel = interaction.guild.channels.cache.find(c => c.id === Config_1.default.channels.tickets);
        const rolesChannel = interaction.guild.channels.cache.find(c => c.id === Config_1.default.channels.roles);
        const privateVoiceChannel = interaction.guild.channels.cache.find(c => c.id === Config_1.default.channels.privateVoice);
        //@ts-ignore
        const member = interaction.guild.members.cache.find((m) => m.id === interaction.member.id);
        const completedEmbed = new discord_js_1.MessageEmbed()
            .setTitle(":white_check_mark: | Done!")
            .setDescription("The message has been sent successfully")
            .setColor("GREEN")
            .setTimestamp();
        await interaction.deferReply({ ephemeral: true });
        switch (application) {
            case "verification":
                if (member.permissions.has("ADMINISTRATOR") || member.roles.cache.find(r => r.id === Config_1.default.roles.staff)) {
                    const verificationButton = new discord_js_1.MessageActionRow()
                        .addComponents(new discord_js_1.MessageButton()
                        .setCustomId('verificationBtn')
                        .setLabel('Verify')
                        .setEmoji('‚úÖ')
                        .setStyle('SUCCESS'));
                    const verificationEmbed = new discord_js_1.MessageEmbed()
                        .setColor('#EE0000')
                        .setTitle('Verify yourself')
                        .setDescription(':flag_es: Verificate para obtener acceso al resto del servidor, en caso de tener algun problema no dudes en mandarle un MD a los staffs!\n\n:flag_us: Verify yourself to gain access to the rest of the server, in case of having any problem verifying don\'t think twice, and DM a Staff');
                    await verificationChannel.bulkDelete(100);
                    await verificationChannel.send({ embeds: [verificationEmbed], components: [verificationButton] });
                    //@ts-ignore
                    await interaction.editReply({ embeds: [completedEmbed], ephemeral: true });
                    break;
                }
                else {
                    interaction.reply({
                        embeds: [Constants_1.noPermsEmbed],
                        ephemeral: true
                    });
                    break;
                }
            case "tickets":
                if (member.permissions.has("ADMINISTRATOR") || member.roles.cache.find(r => r.id === Config_1.default.roles.staff)) {
                    const ticketsEmbed = new discord_js_1.MessageEmbed()
                        .setColor('#EE0000')
                        .setTitle('Tickets')
                        .setDescription(':flag_es: Haz click abajo para abrir un ticket\n\n:flag_us: Click down below to open a Ticket');
                    await ticketsChannel.bulkDelete(100);
                    await ticketsChannel.send({ embeds: [ticketsEmbed], components: [Constants_1.normalTicketButton, Constants_1.applyTicketButton] });
                    //@ts-ignore
                    await interaction.editReply({ embeds: [completedEmbed], ephemeral: true });
                    break;
                }
                else {
                    interaction.reply({
                        embeds: [Constants_1.noPermsEmbed],
                        ephemeral: true
                    });
                    break;
                }
            case "roles":
                if (member.permissions.has("ADMINISTRATOR") || member.roles.cache.find(r => r.id === Config_1.default.roles.ceo)) {
                    const rolesRow = new discord_js_1.MessageActionRow()
                        .addComponents(new discord_js_1.MessageSelectMenu()
                        .setCustomId('roles')
                        .setPlaceholder("No roles selected!")
                        .setMinValues(1)
                        .addOptions([
                        {
                            label: 'Ethical Hacker',
                            value: '888512901562925066',
                            emoji: 'üîß'
                        },
                        {
                            label: 'Pentester',
                            value: '888514696104275968',
                            emoji: 'ü™ì'
                        },
                        {
                            label: 'Cyber Security',
                            value: '888513751932887041',
                            emoji: 'üîê'
                        },
                        {
                            label: 'Game Dev',
                            value: '888543801587662878',
                            emoji: 'üëæ'
                        },
                        {
                            label: 'Discord Bot Dev',
                            value: '888519273838944298',
                            emoji: '‚öô'
                        },
                        {
                            label: 'Full-Stack',
                            value: '888510117157437461',
                            emoji: 'ü•á'
                        },
                        {
                            label: 'Back-End',
                            value: '888508286436012132',
                            emoji: 'üë•'
                        },
                        {
                            label: 'Front-End',
                            value: '888505358807629824',
                            emoji: 'üé®'
                        },
                        {
                            label: 'UX/UI',
                            value: '888531035082600499',
                            emoji: 'üìï'
                        },
                        {
                            label: 'Graphic Designer',
                            value: '888512471554465802',
                            emoji: 'üéâ'
                        }
                    ]));
                    const rolesEmbed = new discord_js_1.MessageEmbed()
                        .setColor("#EE0000")
                        .setTitle("Roles")
                        .setDescription(":flag_es: Selecciona tus roles en dependencia de tus conocimientos\n\n:flag_us: Select your roles in dependance of your knowledge");
                    await rolesChannel.bulkDelete(100);
                    await rolesChannel.send({ embeds: [rolesEmbed], components: [rolesRow] });
                    //@ts-ignore
                    await interaction.editReply({ embeds: [completedEmbed], ephemeral: true });
                }
                else {
                    interaction.reply({
                        embeds: [Constants_1.noPermsEmbed],
                        ephemeral: true
                    });
                    break;
                }
            case "privatevoice":
                if (member.permissions.has("ADMINISTRATOR") || member.roles.cache.find(r => r.id === Config_1.default.roles.staff)) {
                    const privateVoiceEmbed = new discord_js_1.MessageEmbed()
                        .setColor('#EE0000')
                        .setTitle('Private Voices')
                        .setDescription(':flag_es: Haz click abajo para crear t√∫ voz privada\n\n:flag_us: Click down below to create your private voice channel');
                    const privateVoiceButton = new discord_js_1.MessageActionRow()
                        .addComponents(new discord_js_1.MessageButton()
                        .setCustomId('privateVoiceBtn')
                        .setLabel('Create Voice')
                        .setEmoji('<:discord_voice_from_VEGA:899709000113868920>')
                        .setStyle('SECONDARY'), new discord_js_1.MessageButton()
                        .setCustomId('deletePrivateVoiceBtn')
                        .setLabel('Delete Voice')
                        .setEmoji('<:trashcan:900421048649015376>')
                        .setStyle("DANGER"));
                    await privateVoiceChannel.bulkDelete(100);
                    await privateVoiceChannel.send({ embeds: [privateVoiceEmbed], components: [privateVoiceButton] });
                    //@ts-ignore
                    await interaction.editReply({ embeds: [completedEmbed], ephemeral: true });
                    break;
                }
                else {
                    interaction.reply({
                        embeds: [Constants_1.noPermsEmbed],
                        ephemeral: true
                    });
                    break;
                }
        }
    }
};
//# sourceMappingURL=data:application/json;base64,